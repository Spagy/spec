body                 ::= (__ entry NL)* (__ entry)? EOF;
entry                ::= comment
                      | section
                      | message
                      ;

comment              ::= '#' .*;
section              ::= '[[' keyword ']]';
__                   ::= [ \t]*;
NL                   ::= [\r\n]+;

identifier           ::= [a-zA-Z_.?-] ([a-zA-Z0-9_.?-])*;
variable             ::= '$' identifier;
keyword              ::= [^=|#{}\[\]()]+;
builtin              ::= [A-Z_.?-]+;
number               ::= [0-9]+ ('.' [0-9]+)?;
member-base          ::= '[' keyword ']' __ pattern NL;
default-member       ::= '*' member-base
nondefault-member    ::= member-base

member-list          ::= (__ nondefault-member)* (__ default-member) (__ nondefault-member)*
                      |  (__ nondefault-member)+
                      ;

message              ::= identifier __ '=' __ (value | member-list);
value                ::= pattern (NL member-list)?;

pattern              ::= unquoted-pattern
                      |  quoted-pattern
                      ;
unquoted-pattern     ::= (unquoted-text | placeable | block-text)+;
quoted-pattern       ::= '"' (quoted-text | placeable)* '"';
unquoted-text        ::= ([^{] | '\{')+;
quoted-text          ::= ([^{"] | '\{' | '\"')+;
block-text           ::= NL __ '|' unquoted-pattern;

placeable            ::= '{' __ placeable-list __ '}';
placeable-list       ::= placeable-expression (__ ',' __ placeable-list)?;
placeable-expression ::= expression
                      |  select-expression
                      ;
expression           ::= quoted-pattern
                      |  number
                      |  identifier
                      |  variable
                      |  call-expression
                      |  member-expression
                      ;
select-expression    ::= expression __ ' ->' __ NL member-list;

call-expression      ::= builtin '(' __ arglist? __ ')';
arglist              ::= argument (__ ',' __ arglist)?;
argument             ::= expression
                      |  keyword-argument;
keyword-argument     ::= identifier __ '=' __ quoted-pattern;

member-expression    ::= identifier '[' keyword ']';
